<!DOCTYPE html>
<html>
<head>
  <title>Conventional Single Page Application</title>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
  <style type="text/css">
body {
    padding: 10px;
}

#canvas-container {
    border-width: 5px;
    border-color: #222;
    border-style: solid;
    display: inline-block;
}

#canvas-main {
    border-width: 0;
    margin: 0;
}
  </style>
</head>
<body>
  <div id="canvas-container">
    <canvas id="canvas-main" width="800" height="600"></canvas>
  </div>
  <script src="/lib/jquery.js"></script>
  <script src="/lib/jquery.ellocate.js"></script>
  <script src="/lib/jquery.xpath.js"></script>
<script>
"use strict";

var defined = function(val) {
    return (val !== null && val !== undefined);
};

// http://ascii.jp/elem/000/000/513/513377/index-4.html
var CanvasPainter = (function() {
    var myclass = function(selector, init_x, init_y) {
        this.selector = selector;
        this.cursor_x = init_x;
        this.cursor_y = init_y;
        this.enable_draw = false;
        this.color = [0,0,0];
        this.width = 1;
        this._initEventHandlers();
    };
    myclass._rgbaString = function(r, g, b, a) {
        if(!defined(a)) {
            a = 1;
        }
        return "rgba(" + [r,g,b,a].join(",") + ")";
    };
    myclass._drawLine = function(args) {
        // @params: canvas_selector, start_x, start_y, end_x, end_y, color = [0,0,0], width = 1
        $.each(["canvas_selector", "start_x", "start_y", "end_x", "end_y"], function(i, key) {
            if(!defined(args[key])) {
                throw(key + " parameter is mandatory");
            }
        });
        if(!defined(args.color)) {
            args.color = [0,0,0];
        }
        if(!defined(args.width) || args.width <= 0) {
            args.width = 1;
        }
        var context = $(args.canvas_selector).get(0).getContext("2d");
        context.strokeStyle = myclass._rgbaString.apply(null, args.color);
        context.lineWidth = args.width;
        context.beginPath();
        context.moveTo(args.start_x, args.start_y);
        context.lineTo(args.end_x, args.end_y);
        context.stroke();
        context.closePath();
    };
    myclass.prototype = {
        _getCanvasOffsetToWindow: function() {
            return $(this.selector).get(0).getBoundingClientRect();

            // ** getBoundingClientRect() may behave differently
            // ** across browsers. In that case, the following code
            // ** might be useful.
            
            // var offset_to_doc = $(this.selector).offset();
            // var $window = $(window);
            // return {
            //     left: offset_to_doc.left - $window.scrollLeft(),
            //     top: offset_to_doc.top - $window.scrollTop()
            // };
        },
        _getCanvasCoordinatesFromEvent: function(event) {
            var canvas_offset = this._getCanvasOffsetToWindow();

            // ** CAUTION: clientX and clientY are not so universal across all browsers!
            return {x: event.clientX - canvas_offset.left,
                    y: event.clientY - canvas_offset.top};
        },
        _initEventHandlers: function() {
            var self = this;
            var $canvas = $(self.selector);
            $canvas.on("mousemove", function(event) {
                var pos = self._getCanvasCoordinatesFromEvent(event);
                self._moveCursor(pos.x, pos.y);
            });
            $canvas.on("mousedown", function(event) {
                var pos = self._getCanvasCoordinatesFromEvent(event);
                self._moveCursor(pos.x, pos.y);
                self.enable_draw = true;
            });
            $canvas.on("mouseup", function() {
                self.enable_draw = false;
            });
            $canvas.on("mouseout", function() {
                self.enable_draw = false;
            });
        },
        _moveCursor: function(next_x, next_y) {
            // @params: options: color, width
            var self = this;
            if(self.enable_draw) {
                myclass._drawLine({
                    canvas_selector: self.selector,
                    start_x: self.cursor_x, start_y: self.cursor_y,
                    end_x: next_x, end_y: next_y,
                    color: self.color, width: self.width
                });
            }
            self.cursor_x = next_x;
            self.cursor_y = next_y;
        }
    };

    return myclass;
})();

$(function() {
    var painter = new CanvasPainter("#canvas-main", 0, 0);
});

</script>
</body>
</html>
